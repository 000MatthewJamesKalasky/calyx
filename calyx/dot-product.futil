#lang racket/base

(require futil)

(design
 (define/module main () ()
   ([new comb-add0 comp/add]
    [-> in (@ comb-add0 in)]
    [-> (@ comb-add0 left) out])
   )
 )

(define/module main () ()
  ([comb-add0 = new comp/add]
   [dot-we1 = new comp/id]
   [gad3 = new comp/id]
   [gad2 = new comp/id]
   [gad1 = new comp/id]
   [mult0 = new comp/mult]
   [v0 = new comp/reg]
   [i0 = new comp/iterator]
   [dot-we0 = new comp/id]
   [gad0 = new comp/id]
   [dot = new (comp/memory 1)]
   [B = new (comp/memory 8)]
   [A = new (comp/memory 8)]

   [const A-init #f : 32 -> A @ data-in]
   [const B-init #f : 32 -> B @ data-in]
   [const dot-init #f : 32 -> dot @ data-in]
   [const const0 0 : 32 -> gad0 @ in]
   [gad0 @ out -> dot @ addr0]
   [dot-we0 @ out -> dot @ data-in]
   [const const1 0.0 : 32 -> dot-we0 @ in]
   [const i0-start 0 : 32 -> i0 @ start]
   [const i0-incr 1 : 32 -> i0 @ incr]
   [const i0-end 8 : 32 -> i0 @ end]
   [const i0-en 1 : 32 -> i0 @ en]
   [mult0 @ out -> v0 @ in]
   [A @ out -> mult0 @ left]
   [B @ out -> mult0 @ right]
   [i0 @ out -> gad1 @ in]
   [gad1 @ out -> A @ addr0]
   [i0 @ out -> gad2 @ in]
   [gad2 @ out -> B @ addr0]
   [const const2 0 : 32 -> gad3 @ in]
   [gad3 @ out -> dot @ addr0]
   [dot-we1 @ out -> dot @ data-in]
   [v0 @ out -> comb-add0 @ right]
   [dot @ out -> comb-add0 @ left]
   [comb-add0 @ out -> dot-we1 @ in])
  [(!! dot dot-we0 gad0 const0 const1)]
  [(!! i0-en i0-start i0-incr i0-end i0)]
  [(while (i0 @ stop)
     ([(!! v0 mult0 A gad1 i0 B gad2)]
      [(!! comb-add0 dot dot-we1 gad3 const2 v0)]
      [(!! i0 i0-en)]))]
  [(mem-print dot)])

(parse-cmdline (main))
