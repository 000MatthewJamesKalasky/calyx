import "primitives/std.lib";
component main(go: 1, clk: 1) -> (done: 1) {
  cells {
    add0 = prim std_add(4);
    cond_computed0 = prim std_reg(1);
    cond_stored0 = prim std_reg(1);
    const0 = prim std_const(4, 0);
    const1 = prim std_const(4, 2);
    const2 = prim std_const(4, 0);
    const3 = prim std_const(4, 1);
    done_reg0 = prim std_reg(1);
    eq0 = prim std_eq(4);
    fsm0 = prim std_reg(32);
    mod0 = prim std_mod(4);
    x_0 = prim std_reg(4);
  }
  
  wires {
    done_reg0.in = (((cond_computed0.out & cond_stored0.out & x_0.done) | (cond_computed0.out & !(cond_stored0.out))) & fsm0.out == 32'd1 & !(done_reg0.out) & go) ? 1'd1;
    x_0.in = (fsm0.out == 32'd0 & !(x_0.done) & go) ? const0.out;
    fsm0.in = (fsm0.out == 32'd0 & x_0.done & go) ? 32'd1;
    fsm0.in = (fsm0.out == 32'd1 & done_reg0.out & go) ? 32'd2;
    mod0.right = (!(cond_computed0.out) & fsm0.out == 32'd1 & !(done_reg0.out) & go) ? const1.out;
    eq0.right = (!(cond_computed0.out) & fsm0.out == 32'd1 & !(done_reg0.out) & go) ? const2.out;
    cond_stored0.in = (!(cond_computed0.out) & fsm0.out == 32'd1 & !(done_reg0.out) & go) ? eq0.out;
    cond_stored0.write_en = (!(cond_computed0.out) & fsm0.out == 32'd1 & !(done_reg0.out) & go) ? eq0.out;
    eq0.left = (!(cond_computed0.out) & fsm0.out == 32'd1 & !(done_reg0.out) & go) ? mod0.out;
    mod0.left = (!(cond_computed0.out) & fsm0.out == 32'd1 & !(done_reg0.out) & go) ? x_0.out;
    cond_computed0.in = (!(cond_computed0.out) & fsm0.out == 32'd1 & !(done_reg0.out) & go) ? 1'd1;
    x_0.in = (!(x_0.done) & cond_computed0.out & cond_stored0.out & fsm0.out == 32'd1 & !(done_reg0.out) & go) ? add0.out;
    add0.right = (!(x_0.done) & cond_computed0.out & cond_stored0.out & fsm0.out == 32'd1 & !(done_reg0.out) & go) ? const3.out;
    add0.left = (!(x_0.done) & cond_computed0.out & cond_stored0.out & fsm0.out == 32'd1 & !(done_reg0.out) & go) ? x_0.out;
    done_reg0.write_en = ((((cond_computed0.out & cond_stored0.out & x_0.done) | (cond_computed0.out & !(cond_stored0.out))) & fsm0.out == 32'd1 & !(done_reg0.out) & go) | done_reg0.out) ? 1'd1;
    x_0.write_en = ((fsm0.out == 32'd0 & !(x_0.done) & go) | (!(x_0.done) & cond_computed0.out & cond_stored0.out & fsm0.out == 32'd1 & !(done_reg0.out) & go)) ? 1'd1;
    fsm0.write_en = ((fsm0.out == 32'd0 & x_0.done & go) | (fsm0.out == 32'd1 & done_reg0.out & go) | fsm0.out == 32'd2) ? 1'd1;
    cond_computed0.write_en = ((!(cond_computed0.out) & fsm0.out == 32'd1 & !(done_reg0.out) & go) | done_reg0.out) ? 1'd1;
    done = fsm0.out == 32'd2 ? 1'd1;
    fsm0.in = fsm0.out == 32'd2 ? 32'd0;
    cond_computed0.in = done_reg0.out ? 1'd0;
    cond_stored0.in = done_reg0.out ? 1'd0;
    done_reg0.in = done_reg0.out ? 1'd0;
    cond_stored0.write_en = done_reg0.out ? 1'd1;
  }
  
  control {
    
  }
}