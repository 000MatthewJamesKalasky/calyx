import "primitives/std.lib";

// An ACC unit receives a value from the top, adds it to the accumulation
// registers, and puts the value on the down wire on the next cycle.
component mac_pe(top: 32, left:32) -> (down: 32, right: 32) {
  cells {
    // Storage
    acc = prim std_reg(32);
    mac = prim std_reg(32);
    // Computation
    add = prim std_add(32);
    mul = prim std_mult(32);
    // Register to buffer the value for one cycle.
    down_reg = prim std_reg(32);
    right_reg = prim std_reg(32);
  }

  wires {

    group do_add<"static"=1> {
      add.left = acc.out;
      add.right = top;
      acc.in = add.out;
      acc.write_en = 1'd1;
      do_add[done] = acc.done;
    }

    group do_mul<"static"=1> {
      mul.left = acc.out;
      mul.right = left;
      mac.in = mul.out;
      mac.write_en = 1'd1;
      do_mul[done] = mac.done;
    }

    group move_down<"static"=1> {
      down_reg.in = top;
      down_reg.write_en = 1'd1;
      move_down[done] = down_reg.done;
    }

    group move_right<"static"=1> {
      right_reg.in = top;
      right_reg.write_en = 1'd1;
      move_right[done] = right_reg.done;
    }

    // The value forwarded is always from the down_reg
    down = down_reg.out;
    right = right_reg.out;
  }

  control {
    par {
      move_down; move_right;
      seq { do_add; do_mul; }
    }
  }
}

component main() -> () {
  cells {
    pe1 = mac_pe;
  }

  wires {
  }

  control {}
}
