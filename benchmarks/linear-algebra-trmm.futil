#lang racket/base

(require futil)

(define/module main () ()
 ([mult1 = new comp/mult]
[gad11 = new comp/id]
[gad10 = new comp/id]
[gad9 = new comp/id]
[gad8 = new comp/id]
[B_i_j1 = new comp/reg]
[lt0 = new comp/trunc-sub]
[add2 = new comp/add]
[gad7 = new comp/id]
[gad6 = new comp/id]
[mult0 = new comp/mult]
[add1 = new comp/add]
[gad5 = new comp/id]
[gad4 = new comp/id]
[gad3 = new comp/id]
[gad2 = new comp/id]
[B_k_j0 = new comp/reg]
[gad1 = new comp/id]
[gad0 = new comp/id]
[B_i_j0 = new comp/reg]
[add0 = new comp/add]
[k0 = new comp/reg]
[j0 = new comp/iterator]
[i0 = new comp/iterator]
[B = new comp/memory2d]
[A = new comp/memory2d]
[alpha = new comp/reg]
[const alpha-init #f : 32 -> alpha @ in]
[const A-init #f : 32 -> A @ data-in]
[const B-init #f : 32 -> B @ data-in]
[const i0-start 0 : 32 -> i0 @ start]
[const i0-incr 1 : 32 -> i0 @ incr]
[const i0-end 8 : 32 -> i0 @ end]
[const i0-en 1 : 32 -> i0 @ en]
[const j0-start 0 : 32 -> j0 @ start]
[const j0-incr 1 : 32 -> j0 @ incr]
[const j0-end 12 : 32 -> j0 @ end]
[const j0-en 1 : 32 -> j0 @ en]
[add0 @ out -> k0 @ in]
[i0 @ out -> add0 @ left]
[const const0 1 : 32 -> add0 @ right]
[B @ out -> B_i_j0 @ in]
[i0 @ out -> gad0 @ in]
[gad0 @ out -> B @ addr1]
[j0 @ out -> gad1 @ in]
[gad1 @ out -> B @ addr2]
[B @ out -> B_k_j0 @ in]
[k0 @ out -> gad2 @ in]
[gad2 @ out -> B @ addr1]
[j0 @ out -> gad3 @ in]
[gad3 @ out -> B @ addr2]
[i0 @ out -> gad4 @ in]
[gad4 @ out -> B @ addr1]
[j0 @ out -> gad5 @ in]
[gad5 @ out -> B @ addr2]
[mult0 @ out -> add1 @ left]
[B_i_j0 @ out -> add1 @ right]
[A @ out -> mult0 @ left]
[B_k_j0 @ out -> mult0 @ right]
[k0 @ out -> gad6 @ in]
[gad6 @ out -> A @ addr1]
[i0 @ out -> gad7 @ in]
[gad7 @ out -> A @ addr2]
[add1 @ out -> B @ data-in]
[k0 @ out -> add2 @ left]
[const const2 1 : 32 -> add2 @ right]
[add2 @ out -> k0 @ in]
[const const1 8 : 32 -> lt0 @ left]
[k0 @ out -> lt0 @ right]
[B @ out -> B_i_j1 @ in]
[i0 @ out -> gad8 @ in]
[gad8 @ out -> B @ addr1]
[j0 @ out -> gad9 @ in]
[gad9 @ out -> B @ addr2]
[i0 @ out -> gad10 @ in]
[gad10 @ out -> B @ addr1]
[j0 @ out -> gad11 @ in]
[gad11 @ out -> B @ addr2]
[alpha @ out -> mult1 @ left]
[B_i_j1 @ out -> mult1 @ right]
[mult1 @ out -> B @ data-in])
[(!! i0-en i0-start i0-incr i0-end i0)]
[(while (i0 @ stop)
([(!! j0-en j0-start j0-incr j0-end j0)]
[(while (j0 @ stop)
([(!! k0 add0 i0 const0) ([(!! lt0 const1 k0)]
[(while (lt0 @ out)
([(!! B_i_j0 B gad0 gad1 i0 j0)]
[(!! B_k_j0 B gad2 gad3 k0 j0)]
[(!! B gad4 gad5 i0 j0 add1 mult0 A gad6 gad7 k0 B_k_j0 B_i_j0) (!! k0 add2 const2)]
[(!! lt0 const1 k0)]))])]
[(!! B_i_j1 B gad8 gad9 i0 j0)]
[(!! B gad10 gad11 i0 j0 mult1 alpha B_i_j1)]
[(!! j0 j0-en)]))]
[(!! i0 i0-en)]))]
[(mem-print B)])

(parse-cmdline (main))