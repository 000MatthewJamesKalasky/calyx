decl alpha: ubit<32>[1];
decl beta: ubit<32>[1];
decl C: ubit<32>[8][8];
decl A_int: ubit<32>[8][12];

let A: ubit<32>[8][12 bank 4];
view A_sh = A[_: bank 1][_: bank 1];

for (let i0: ubit<4> = 0..8) {
  for (let j0: ubit<4> = 0..12) {
    A_sh[i0][j0] := A_int[i0][j0];
  }
}

---

for (let i: ubit<4> = 0..8) {
  let j: ubit<4> = 0;

  // Originally a for loop
  while (j <= i) {
    decor "#pragma HLS loop_tripcount min=1 max=8 avg=4"
    let C_i_j: ubit<32> = C[i][j];
    ---
    C[i][j] := C_i_j * beta[0];
    // Update loop counter
    j := j + 1;
  }
  ---
  let j2: ubit<4> = 0;
  while (j2 <= i) {
    for (let k: ubit<4> = 0..12) unroll 4 {
      decor "#pragma HLS loop_tripcount min=1 max=8 avg=4"
      let A_i_k: ubit<32> = A[i][k];
      ---
      let t = alpha[0] * A_i_k * A[j2][k];
    } combine {
      C[i][j2] += t;
    }
    // Update loop counter
    j2 := j2 + 1;
  }
}

---

for (let i0: ubit<4> = 0..8) {
  for (let j0: ubit<4> = 0..12) {
    A_int[i0][j0] := A_sh[i0][j0];
  }
}
