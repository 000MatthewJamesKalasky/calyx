decl alpha: ubit<32>;
decl beta: ubit<32>;
decl tmp: ubit<32>[8][8];
decl A: ubit<32>[8][8];
decl B: ubit<32>[8][8];
decl C: ubit<32>[8][8];
decl D: ubit<32>[8][8];


for (let i: ubit<4> = 0..8) {
  for (let j: ubit<4> = 0..8) {
    tmp[i][j] := (0 as ubit<32>);
    ---
    for (let k: ubit<4> = 0..8) {
      let v: ubit<32> = alpha * A[i][k] * B[k][j]
    } combine {
      tmp[i][j] += v;
    }
  }
}

---

for (let i: ubit<4> = 0..8) {
  for (let j: ubit<4> = 0..8) {
    let d_tmp: ubit<32> = D[i][j];
    ---
    D[i][j] := beta * d_tmp;
    ---
    for (let k: ubit<4> = 0..8) {
      let v: ubit<32> = tmp[i][k] * C[k][j]
    } combine {
      D[i][j] += v;
    }
  }
}
