decl alpha: ubit<32>[1];
decl beta: ubit<32>[1];
decl C: ubit<32>[8][8];
decl A: ubit<32>[8][12];

for (let i: ubit<4> = 0..8) {
  let j: ubit<4> = (0 as ubit<4>);

  // Originally a for loop
  while (j <= i) {
    let C_i_j: ubit<32> = C[i][j];
    ---
    C[i][j] := C_i_j * beta[(0 as ubit<1>)];
    // Update loop counter
    j := j + (1 as ubit<4>);
  }
  ---
  for (let k: ubit<4> = 0..12) {
    let j2 = (0 as ubit<4>);
    while (j2 <= i) {
      let C_i_j: ubit<32> = C[i][j2];
      let A_i_k: ubit<32> = A[i][k];
      ---
      C[i][j2] := alpha[(0 as ubit<1>)] * A_i_k * A[j2][k] + C_i_j;
      // Update loop counter
      j2 := j2 + (1 as ubit<4>);
    }
  }
}
