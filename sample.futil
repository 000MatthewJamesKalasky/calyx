import "primitives/std.lib";

// i = 0;
// x = 0;
// while i < 10 {
//   x = i + x;
//   i = i + 1;
// }

component main {
  cells {
    i = prim std_reg(32);
    x = prim std_reg(32);
    lt = prim std_lt(32);
    adder = prim std_add(32);
    incr = prim std_add(32);
  }

  wires {
    group init {
      i.in = 32'd0;
      x.in = 32'd0;
    }

    group cond {
      lt.left = i.out;
      lt.right = 32'd10;
    }

    group body {
      adder.right = i.out;
      adder.left = x.out;
      x.in = adder.out;

      incr.right = i.out;
      incr.left = 32'd1;
      i.in = incr.out;
    }
  }

  control {
    while lt.out with cond {
      body;
    }
  }
}

component compiled {
  cells {
    i = prim std_reg(32);
    x = prim std_reg(32);
    lt = prim std_lt(32);
    adder = prim std_add(32);
    incr = prim std_add(32);

    // generated
    cond_computed = prim std_reg(1);
    cond_stored = prim std_reg(1);
  }

  wires {
    group init {
      i.in = init[go] ? 32'd0;
      x.in = init[go] ? 32'd0;
    }

    group cond {
      lt.left = cond[go] ? i.out;
      lt.right = cond[go] ? 32'd10;
    }

    group body {
      adder.right = body[go] ? i.out;
      adder.left = body[go] ? x.out;
      x.in = body[go] ? adder.out;

      incr.right = body[go] ? i.out;
      incr.left = body[go] ? 32'd1;
      i.in = body[go] ? incr.out;
    }

    group while0 {
      cond[go] = while0[go] & !cond_computed.out ? 1'b1;
      cond_computed.in = while0[go] & cond[done] ? 1'b1;
      cond_stored.in = while0[go] & cond[done] ? lt.out;

      body[go] = while0[go] & cond_computed.out & cond_stored.out ? 1'b1;
      cond_computed.in = while0[go] & body[done] ? 1'b0;
      while0[done] = while0[go] & cond_computed.out & !cond_stored.out ? 1'b1;
    }
  }

  control {
    while0;
  }
}
