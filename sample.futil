import "primitives/std.lib";

// while (i != 15) {
//   viz = mem[i];
//   mem[i] = i;
//   i += 1;
// }
// i = 0;
// while (i != 15) {
//   viz = mem[i];
//   i += 1;
// }

component main {
  cells {
    mem = prim std_mem_d1(32, 16, 4);
    i = prim std_reg(4);
    x = prim std_reg(32);
    viz = prim std_reg(32);
    lt0 = prim std_neq(4);
    add0 = prim std_add(4);
    addx = prim std_add(32);
    lt1 = prim std_neq(4);
    add1 = prim std_add(4);
  }

  wires {
    group cond0 {
      lt0.left = i.out;
      lt0.right = 4'd15;
      cond0[done] = 1'b1;
    }

    group body0_0 {
      mem.addr0 = i.out;
      viz.in = mem.read_data;
      viz.write_en = 1'b1;
      body0_0[done] = viz.done;
    }

    group body0_1 {
      mem.addr0 = i.out;
      mem.write_data = x.out;
      mem.write_en = 1'b1;
      body0_1[done] = mem.done;
    }

    group incr_i0 {
      add0.right = i.out;
      add0.left = 4'd1;
      i.in = add0.out;
      i.write_en = 1'b1;

      addx.right = x.out;
      addx.left = 32'd1;
      x.in = addx.out;
      x.write_en = 1'b1;

      incr_i0[done] = i.done & x.done ? 1'b1;
    }

    group reset_i {
      i.in = 4'd0;
      i.write_en = 1'b1;
      reset_i[done] = i.done;
    }

    group cond1 {
      lt1.left = i.out;
      lt1.right = 4'd15;
      cond1[done] = 1'b1;
    }

    group body1 {
      mem.addr0 = i.out;
      viz.in = mem.read_data;
      viz.write_en = 1'b1;
      body1[done] = viz.done;
    }

    group incr_i1 {
      add1.right = i.out;
      add1.left = 4'd1;
      i.in = add1.out;
      i.write_en = 1'b1;
      incr_i1[done] = i.done;
    }
  }

  control {
    seq {
      while lt0.out with cond0 {
        seq {
          body0_0;
          body0_1;
          incr_i0;
        }
      }
      reset_i;
      while lt1.out with cond1 {
        seq {
          body1;
          incr_i1;
        }
      }
    }
  }
}

// component main {
//   cells {
//     x = prim std_reg(1);
//     y = prim std_reg(1);
//   }

//   wires {

//     group x-assign {
//       x.in = 1'd1;
//       x-assign[done] = 1'd1;
//     }

//     group y-assign {
//       y.in = 1'd0;
//       y-assign[done] = 1'd1;
//     }
//   }

//   control {
//     par {
//       x-assign; y-assign;
//     }
//   }
// }

// component main {
//   cells {
//     i = prim std_reg(32);
//     x = prim std_reg(32);
//     lt = prim std_lt(32);
//     adder = prim std_add(32);
//     incr = prim std_add(32);
//   }

//   wires {
//     group init {
//       i.in = 32'd0;
//       x.in = 32'd0;
//     }

//     group cond {
//       lt.left = i.out;
//       lt.right = 32'd10;
//     }

//     group body {
//       adder.right = i.out;
//       adder.left = x.out;
//       x.in = adder.out;

//       incr.right = i.out;
//       incr.left = 32'd1;
//       i.in = incr.out;
//     }
//   }

//   control {
//     seq {
//       init;
//       if lt.out with cond {
//         body;
//       } else {
//         body;
//       }
//     }
//   }
// }

// component compiled {
//   cells {
//     i = prim std_reg(32);
//     x = prim std_reg(32);
//     lt = prim std_lt(32);
//     adder = prim std_add(32);
//     incr = prim std_add(32);

// component main {
//   cells {
//     a = prim std_reg(32);
//     b = prim std_reg(32);
//     c = prim std_reg(32);
//   }

//   wires {
//     group ar {
//       a.in = 32'd1;
//       a.write_en = 1'b1;
//       ar[done] = a.done ? 1'b1;
//     }
//     group br {
//       b.in = 32'd2;
//       b.write_en = 1'b1;
//       br[done] = b.done ? 1'b1;
//     }
//     group cr {
//       c.in = 32'd3;
//       c.write_en = 1'b1;
//       cr[done] = c.done ? 1'b1;
//     }
//   }

//   control {
//     seq {
//       ar;
//       br;
//       cr;
//     }
//   }
// }


// component main {
//   cells {
//     x = prim std_reg(32);
//     comp = prim std_eq(32);
//   }

//   wires {
//     // group init {
//     //   x.in = 32'd1;
//     //   x.write_en = 1'b1;
//     //   init[done] = x.done ? 1'b1;
//     // }

//     group cond {
//       comp.right = x.out;
//       comp.left = 32'd1;
//       cond[done] = 1'b1;
//     }

//     group true {
//       x.in = 32'd2;
//       x.write_en = 1'b1;
//       true[done] = x.done ? 1'b1;
//     }

//     group false {
//       x.in = 32'd3;
//       x.write_en = 1'b1;
//       false[done] = x.done ? 1'b1;
//     }
//   }

//   control {
//     // seq {
//       // init;
//       if comp.out with cond {
//         true;
//       } else {
//         false;
//       }
//     // }
//   }
// }

// i = 0;
// while i < 10 {
//   j = 0;
//   while j < 10 {
//     j++;
//   }
//   i++;
// }

// fibonacci
// component main {
//   cells {
//     i = prim std_reg(32);
//     j = prim std_reg(32);
//     add1 = prim std_add(32);
//     add2 = prim std_add(32);
//     lt1 = prim std_lt(32);
//     lt2 = prim std_lt(32);
//   }

//   wires {
//     group cond {
//       lt1.left = i.out;
//       lt1.right = 32'd10;
//       cond[done] = 1'b1;
//     }

//     group inner_cond {
//       lt2.left = j.out;
//       lt2.right = 32'd10;
//       inner_cond[done] = 1'b1;
//     }

//     group reset_j {
//       j.in = 32'd0;
//       j.write_en = 1'b1;
//       reset_j[done] = j.done ? 1'b1;
//     }

//     group incr_j {
//       add1.right = 32'b1;
//       add1.left = j.out;
//       j.in = add1.out;
//       j.write_en = 1'b1;
//       incr_j[done] = j.done ? 1'b1;
//     }

//     group incr_i {
//       add2.right = 32'b1;
//       add2.left = i.out;
//       i.in = add2.out;
//       i.write_en = 1'b1;
//       incr_i[done] = i.done ? 1'b1;
//     }
//   }

//   control {
//     while lt1.out with cond {
//       seq {
//         reset_j;
//         while lt2.out with inner_cond {
//           incr_j;
//         }
//         incr_i;
//       }
//     }
//   }
// }
// component main {
//   cells {
//     i = prim std_reg(32);
//     j = prim std_reg(32);
//     add1 = prim std_add(32);
//     add2 = prim std_add(32);
//     lt1 = prim std_lt(32);
//     lt2 = prim std_lt(32);
//   }

//   wires {
//     group cond {
//       lt1.left = i.out;
//       lt1.right = 32'd10;
//       cond[done] = 1'b1;
//     }

//     group inner_cond {
//       lt2.left = j.out;
//       lt2.right = 32'd10;
//       inner_cond[done] = 1'b1;
//     }

//     group reset_j {
//       j.in = 32'd0;
//       j.write_en = 1'b1;
//       reset_j[done] = j.done ? 1'b1;
//     }

//     group incr_j {
//       add1.right = 32'b1;
//       add1.left = j.out;
//       j.in = add1.out;
//       j.write_en = 1'b1;
//       incr_j[done] = j.done ? 1'b1;
//     }

//     group incr_i {
//       add2.right = 32'b1;
//       add2.left = i.out;
//       i.in = add2.out;
//       i.write_en = 1'b1;
//       incr_i[done] = i.done ? 1'b1;
//     }
//   }

//   control {
//     while lt1.out with cond {
//       seq {
//         reset_j;
//         while lt2.out with inner_cond {
//           incr_j;
//         }
//         incr_i;
//       }
//     }
//   }
// }
