import "primitives/std.lib";

// component main {
//   cells {
//     x = prim std_reg(1);
//     y = prim std_reg(1);
//   }

//   wires {

//     group x-assign {
//       x.in = 1'd1;
//       x-assign[done] = 1'd1;
//     }

//     group y-assign {
//       y.in = 1'd0;
//       y-assign[done] = 1'd1;
//     }
//   }

//   control {
//     par {
//       x-assign; y-assign;
//     }
//   }
// }

// component main(go: 1) -> (done: 1) {
//   cells {
//     x = prim std_reg(2);
//     y = prim std_reg(2);
//   }

//   wires {
//     group par0 {
//       x-assign[go] = par0[go] ? 1'b1;
//       y-assign[go] = par0[go] ? 1'b1;
//       par0[done] = x-assign[done] & y-assign[done] & par0[go] ? 1'd1;
//     }
//     group x-assign {
//       x.in = par0[go] ? 2'b10;
//       x-assign[done] = 1'd1;
//     }
//     group y-assign {
//       y.in = par0[go] ? 2'b01;
//       y-assign[done] = 1'd1;
//     }
//   }

//   control {
//     par0;
//   }
// }


// component main {
//   cells {
//     a = prim std_reg(32);
//     b = prim std_reg(32);
//     c = prim std_reg(32);
//   }

//   wires {
//     group ar {
//       a.in = 32'd1;
//       a.write_en = 1'b1;
//       ar[done] = a.done ? 1'b1;
//     }
//     group br {
//       b.in = 32'd2;
//       b.write_en = 1'b1;
//       br[done] = b.done ? 1'b1;
//     }
//     group cr {
//       c.in = 32'd3;
//       c.write_en = 1'b1;
//       cr[done] = c.done ? 1'b1;
//     }
//   }

//   control {
//     seq {
//       ar;
//       br;
//       cr;
//     }
//   }
// }


// component main {
//   cells {
//     x = prim std_reg(32);
//     comp = prim std_eq(32);
//   }

//   wires {
//     group init {
//       x.in = 32'd1;
//       x.write_en = 1'b1;
//       init[done] = x.done ? 1'b1;
//     }

//     group cond {
//       comp.right = x.out;
//       comp.left = 32'd1;
//       cond[done] = 1'b1;
//     }

//     group true {
//       x.in = 32'd2;
//       x.write_en = 1'b1;
//       true[done] = x.done ? 1'b1;
//     }

//     group false {
//       x.in = 32'd3;
//       x.write_en = 1'b1;
//       false[done] = x.done ? 1'b1;
//     }
//   }

//   control {
//     seq {
//       init;
//       if comp.out with cond {
//         true;
//       } else {
//         false;
//       }
//     }
//   }
// }

// fibonacci
component main {
  cells {
    a = prim std_reg(32);
    b = prim std_reg(32);
    add = prim std_add(32);
    comp = prim std_lt(32);
  }

  wires {
    group init {
      a.in = 32'd1;
      a.write_en = 1'b1;
      b.in = 32'd1;
      b.write_en = 1'b1;
      init[done] = a.done & b.done ? 1'b1;
    }

    group cond {
      comp.left = a.out;
      comp.right = 32'd100;
      cond[done] = 1'b1;
    }

    group body {
      add.right = a.out;
      add.left = b.out;
      a.in = add.out;
      a.write_en = 1'b1;
      b.in = a.out;
      b.write_en = 1'b1;
      body[done] = a.done & b.done ? 1'b1;
    }
  }

  control {
    seq {
      init;
      while comp.out with cond {
        body;
      }
    }
  }
}
