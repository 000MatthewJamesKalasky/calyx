import "primitives/std.lib";

// x = 1;
// if x == 1 {
//   x = 2;
// } else {
//   x = 3;
// }

component main {
  cells {
    x = prim std_reg(32);
    comp = prim std_eq(32);
  }

  wires {
    group init {
      x.in = 32'd1;
      init[done] = 1'b1;
    }

    group cond {
      comp.right = x.out;
      comp.left = 32'd1;
      cond[done] = 1'b1;
    }

    group true {
      x.in = 32'd2;
      true[done] = 1'b1;
    }

    group false {
      x.in = 32'd3;
      false[done] = 1'b1;
    }
  }

  control {
    seq {
      init;
      if comp.out with cond {
        true;
      } else {
        false;
      }
    }
  }
}

// component compiled {
//   cells {
//     x = prim std_reg(32);
//     comp = prim std_eq(32);

//     // generated
//     or = prim std_or(1);
//     cond_computed = prim std_reg(1);
//     cond_stored = prim std_reg(32);
//   }

//   wires {
//     group init {
//       x.in = init[go] ? 32'd1;
//       init[done] = init[go] ? 1'b1;
//     }

//     group cond {
//       comp.right = cond[go] ? x.out;
//       comp.left = cond[go] ? 32'd1;
//       cond[done] = cond[go] ? 1'b1;
//     }

//     group true {
//       x.in = true[go] ? 32'd2;
//       true[done] = true[go] ? 1'b1;
//     }

//     group false {
//       x.in = false[go] ? 32'd3;
//       false[done] = false[go] ? 1'b1;
//     }

//     group ifcompiled {
      // cond_computed.in = ifcompiled[go] & cond[done] ? 1'b1;
         // cond_stored = cond[done] ? comp.out;
//       cond[go] = ifcompiled[go] & !cond_computed.out ? 1'b1;
//       true[go] = ifcompiled[go] & cond_computed.out & cond_stored.out ? 1'b1;
//       false[go] = ifcompiled[go] & cond_computed.out & !cond_stored.out ? 1'b1;
//       or.right = ifcompiled[go] ? true[done];
//       or.left = ifcompiled[go] ? false[done];
//       ifcompiled[done] = or.out;
//     }
//   }

//   // this[go]           | 1 1
//   // this[done]         | x 1
//   // cond[go]           | 1 0
//   // cond[done]         | 1 x
//   // true[go]           | 0 1
//   // true[done]         | x 1
//   // false[go]          | 0 0
//   // false[done]        | x x
//   // or.right           | x 1
//   // or.left            | x x
//   // or.out             | x 1
//   // cond_computed.in   | 1 x
//   // cond_computed.out  | 0 1

//   // this[go]           | 1 1 1 1 1
//   // this[done]         | x 0 x x 1
//   // cond[go]           | 1 0 0 x x
//   // cond[done]         | 1 0 x x x
//   // true[go]           | 0 1 1 1 1
//   // true[done]         | x x x x 1
//   // false[go]          | 0 0 0 0 0
//   // false[done]        | x x x x x
//   // or.right           | x x x x 1
//   // or.left            | x x x x x
//   // or.out             | x x x x 1
//   // cond_computed.in   | 1 x x x x
//   // cond_computed.out  | 0 1 1 1 1
//   // cond_stored.out    | 1 1 1 1 1

//   control {
//     seq {
//       init;
//       ifcompiled;
//     }
//   }
// }
